{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "invalid_amt",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "Loaners",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "Payers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Received",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAdddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkNftOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "giveLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerNft",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x198cb59fa3d5465b061fc8b2c8c8d7f5b3096aca19b55095af9f1409e69bbf32",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "808184",
    "logsBloom": "0x
    "blockHash": "0x1495645aad6c2ba20db19c5ae2acd816d6cf162d674d8fa0a58478b468ddddcc",
    "transactionHash": "0x198cb59fa3d5465b061fc8b2c8c8d7f5b3096aca19b55095af9f1409e69bbf32",
    "logs": [],
    "blockNumber": 9,
    "cumulativeGasUsed": "808184",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "58111ca1a143a37b456704a95081a798",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"invalid_amt\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Loaners\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Payers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAdddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkNftOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"giveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Handle the receipt of a NFT. The ERC721 smart contract calls this function on the recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return of other than the magic value MUST result in the transaction being reverted. Returns `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` unless throwing.\",\"params\":{\"_data\":\"Additional data with no specified format.\",\"_from\":\"The address which previously owned the token.\",\"_operator\":\"The address which called `safeTransferFrom` function.\",\"_tokenId\":\"The NFT identifier which is being transferred.\"},\"returns\":{\"_0\":\"Returns `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"The contract address is always the message sender. A wallet/broker/auction application MUST implement the wallet interface if it will accept safe transfers.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/loan.sol\":\"loan\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/loan.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\npragma solidity ^0.8.19;\\nerror invalid_amt();\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface ERC721TokenReceiver\\n{\\n\\n  /**\\n   * @notice The contract address is always the message sender. A wallet/broker/auction application\\n   * MUST implement the wallet interface if it will accept safe transfers.\\n   * @dev Handle the receipt of a NFT. The ERC721 smart contract calls this function on the\\n   * recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return\\n   * of other than the magic value MUST result in the transaction being reverted.\\n   * Returns `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` unless throwing.\\n   * @param _operator The address which called `safeTransferFrom` function.\\n   * @param _from The address which previously owned the token.\\n   * @param _tokenId The NFT identifier which is being transferred.\\n   * @param _data Additional data with no specified format.\\n   * @return Returns `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n   */\\n  function onERC721Received(\\n    address _operator,\\n    address _from,\\n    uint256 _tokenId,\\n    bytes calldata _data\\n  )\\n    external\\n    returns(bytes4);\\n\\n}\\ncontract loan is\\n  ERC721TokenReceiver {\\n    IERC721 public nft;\\n      event Received();\\n    event Loaners(address indexed nft, uint indexed tokenId, uint indexed amt);\\n    event Payers(address indexed nft, uint indexed tokenId, uint indexed amt);\\n    struct loaner {\\n        address nft;\\n        uint tokenId;\\n        uint amt;\\n    }\\n\\n    mapping(address => loaner) loanernft;\\n\\n    constructor()payable{}\\n\\n    function giveLoan(address nftAddress, uint tokenId, uint amt) public {\\n        require(checkNftOwner(nftAddress, tokenId), \\\"transfer owner\\\");\\n        loaner memory user1 = loaner(nftAddress, tokenId, amt);\\n        loanernft[msg.sender] = user1;\\n        (bool sent /* bytes memory data*/, ) = msg.sender.call{value: amt}(\\\"\\\");\\n        emit Loaners(nftAddress, tokenId, amt);\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function collectLoan() public payable {\\n        loaner memory user1 = loanernft[msg.sender];\\n        if (user1.amt > msg.value) {\\n            revert invalid_amt();\\n        }\\n\\n        IERC721 nft1 = IERC721(user1.nft);\\n        nft1.safeTransferFrom(address(this), msg.sender, user1.tokenId);\\n\\n        delete loanernft[msg.sender];\\n        emit Payers(user1.nft, user1.tokenId, user1.amt);\\n    }\\n\\n    function fund() public payable returns (uint) {\\n        return msg.value;\\n    }\\n\\n    function checkNftOwner(\\n        address nftAdddress,\\n        uint tokenId\\n    ) public returns (bool) {\\n        nft = IERC721(nftAdddress);\\n        if (nft.ownerOf(tokenId) == address(this)) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function ownerNft(uint tokenId) public view returns (address) {\\n        return nft.ownerOf(tokenId);\\n    }\\n    function onERC721Received(\\n    address _operator,\\n    address _from,\\n    uint256 _tokenId,\\n    bytes calldata _data\\n  )\\n    external\\n    override\\n    returns(bytes4)\\n  {\\n    _operator;\\n    _from;\\n    _tokenId;\\n    _data;\\n    emit Received();\\n    return 0x150b7a02;\\n  }\\n}\",\"keccak256\":\"0xfe3d2371d6ae321055612550d50be10a4b595e068d20bfd5dd47c59fb67e401a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052610db2806100136000396000f3fe6080604052600436106100705760003560e01c806347ccca021161004e57806347ccca021461012c578063b0857bb414610157578063b60d428814610161578063c4b5a9901461017f57610070565b80630abeb5f614610075578063150b7a02146100b257806321381d37146100ef575b600080fd5b34801561008157600080fd5b5061009c600480360381019061009791906108cd565b6101a8565b6040516100a99190610928565b60405180910390f35b3480156100be57600080fd5b506100d960048036038101906100d491906109a8565b6102ca565b6040516100e69190610a6b565b60405180910390f35b3480156100fb57600080fd5b5061011660048036038101906101119190610a86565b61030b565b6040516101239190610ac2565b60405180910390f35b34801561013857600080fd5b506101416103af565b60405161014e9190610b3c565b60405180910390f35b61015f6103d3565b005b610169610613565b6040516101769190610b66565b60405180910390f35b34801561018b57600080fd5b506101a660048036038101906101a19190610b81565b61061b565b005b6000826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b815260040161025a9190610b66565b602060405180830381865afa158015610277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029b9190610be9565b73ffffffffffffffffffffffffffffffffffffffff16036102bf57600190506102c4565b600090505b92915050565b60007f544c765b33ca411cce832250371569244f765a17fcd217832be093f0fd5fa45b60405160405180910390a163150b7a0260e01b905095945050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016103679190610b66565b602060405180830381865afa158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a89190610be9565b9050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481525050905034816040015111156104c9576040517f3d51786700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816000015190508073ffffffffffffffffffffffffffffffffffffffff166342842e0e303385602001516040518463ffffffff1660e01b815260040161051393929190610c16565b600060405180830381600087803b15801561052d57600080fd5b505af1158015610541573d6000803e3d6000fd5b50505050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055505081604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff167fb91c37ff95a4037462db444e1cacb8f25552739b57ef7265db27e450784af28260405160405180910390a45050565b600034905090565b61062583836101a8565b610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b90610caa565b60405180910390fd5b600060405180606001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015590505060003373ffffffffffffffffffffffffffffffffffffffff168360405161075d90610cfb565b60006040518083038185875af1925050503d806000811461079a576040519150601f19603f3d011682016040523d82523d6000602084013e61079f565b606091505b5050905082848673ffffffffffffffffffffffffffffffffffffffff167fbced21c9673b199eb1b9af888dbb1a5ee0dcbe690f4ec216c541d319ef97d2b760405160405180910390a480610828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081f90610d5c565b60405180910390fd5b5050505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061086482610839565b9050919050565b61087481610859565b811461087f57600080fd5b50565b6000813590506108918161086b565b92915050565b6000819050919050565b6108aa81610897565b81146108b557600080fd5b50565b6000813590506108c7816108a1565b92915050565b600080604083850312156108e4576108e361082f565b5b60006108f285828601610882565b9250506020610903858286016108b8565b9150509250929050565b60008115159050919050565b6109228161090d565b82525050565b600060208201905061093d6000830184610919565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261096857610967610943565b5b8235905067ffffffffffffffff81111561098557610984610948565b5b6020830191508360018202830111156109a1576109a061094d565b5b9250929050565b6000806000806000608086880312156109c4576109c361082f565b5b60006109d288828901610882565b95505060206109e388828901610882565b94505060406109f4888289016108b8565b935050606086013567ffffffffffffffff811115610a1557610a14610834565b5b610a2188828901610952565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610a6581610a30565b82525050565b6000602082019050610a806000830184610a5c565b92915050565b600060208284031215610a9c57610a9b61082f565b5b6000610aaa848285016108b8565b91505092915050565b610abc81610859565b82525050565b6000602082019050610ad76000830184610ab3565b92915050565b6000819050919050565b6000610b02610afd610af884610839565b610add565b610839565b9050919050565b6000610b1482610ae7565b9050919050565b6000610b2682610b09565b9050919050565b610b3681610b1b565b82525050565b6000602082019050610b516000830184610b2d565b92915050565b610b6081610897565b82525050565b6000602082019050610b7b6000830184610b57565b92915050565b600080600060608486031215610b9a57610b9961082f565b5b6000610ba886828701610882565b9350506020610bb9868287016108b8565b9250506040610bca868287016108b8565b9150509250925092565b600081519050610be38161086b565b92915050565b600060208284031215610bff57610bfe61082f565b5b6000610c0d84828501610bd4565b91505092915050565b6000606082019050610c2b6000830186610ab3565b610c386020830185610ab3565b610c456040830184610b57565b949350505050565b600082825260208201905092915050565b7f7472616e73666572206f776e6572000000000000000000000000000000000000600082015250565b6000610c94600e83610c4d565b9150610c9f82610c5e565b602082019050919050565b60006020820190508181036000830152610cc381610c87565b9050919050565b600081905092915050565b50565b6000610ce5600083610cca565b9150610cf082610cd5565b600082019050919050565b6000610d0682610cd8565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610d46601483610c4d565b9150610d5182610d10565b602082019050919050565b60006020820190508181036000830152610d7581610d39565b905091905056fea2646970667358221220be7a14ca2176b63204883e7bd502d4c80f2915a3e2660620a67319780a081fd364736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c806347ccca021161004e57806347ccca021461012c578063b0857bb414610157578063b60d428814610161578063c4b5a9901461017f57610070565b80630abeb5f614610075578063150b7a02146100b257806321381d37146100ef575b600080fd5b34801561008157600080fd5b5061009c600480360381019061009791906108cd565b6101a8565b6040516100a99190610928565b60405180910390f35b3480156100be57600080fd5b506100d960048036038101906100d491906109a8565b6102ca565b6040516100e69190610a6b565b60405180910390f35b3480156100fb57600080fd5b5061011660048036038101906101119190610a86565b61030b565b6040516101239190610ac2565b60405180910390f35b34801561013857600080fd5b506101416103af565b60405161014e9190610b3c565b60405180910390f35b61015f6103d3565b005b610169610613565b6040516101769190610b66565b60405180910390f35b34801561018b57600080fd5b506101a660048036038101906101a19190610b81565b61061b565b005b6000826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b815260040161025a9190610b66565b602060405180830381865afa158015610277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029b9190610be9565b73ffffffffffffffffffffffffffffffffffffffff16036102bf57600190506102c4565b600090505b92915050565b60007f544c765b33ca411cce832250371569244f765a17fcd217832be093f0fd5fa45b60405160405180910390a163150b7a0260e01b905095945050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016103679190610b66565b602060405180830381865afa158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a89190610be9565b9050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481525050905034816040015111156104c9576040517f3d51786700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816000015190508073ffffffffffffffffffffffffffffffffffffffff166342842e0e303385602001516040518463ffffffff1660e01b815260040161051393929190610c16565b600060405180830381600087803b15801561052d57600080fd5b505af1158015610541573d6000803e3d6000fd5b50505050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055505081604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff167fb91c37ff95a4037462db444e1cacb8f25552739b57ef7265db27e450784af28260405160405180910390a45050565b600034905090565b61062583836101a8565b610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b90610caa565b60405180910390fd5b600060405180606001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015590505060003373ffffffffffffffffffffffffffffffffffffffff168360405161075d90610cfb565b60006040518083038185875af1925050503d806000811461079a576040519150601f19603f3d011682016040523d82523d6000602084013e61079f565b606091505b5050905082848673ffffffffffffffffffffffffffffffffffffffff167fbced21c9673b199eb1b9af888dbb1a5ee0dcbe690f4ec216c541d319ef97d2b760405160405180910390a480610828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081f90610d5c565b60405180910390fd5b5050505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061086482610839565b9050919050565b61087481610859565b811461087f57600080fd5b50565b6000813590506108918161086b565b92915050565b6000819050919050565b6108aa81610897565b81146108b557600080fd5b50565b6000813590506108c7816108a1565b92915050565b600080604083850312156108e4576108e361082f565b5b60006108f285828601610882565b9250506020610903858286016108b8565b9150509250929050565b60008115159050919050565b6109228161090d565b82525050565b600060208201905061093d6000830184610919565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261096857610967610943565b5b8235905067ffffffffffffffff81111561098557610984610948565b5b6020830191508360018202830111156109a1576109a061094d565b5b9250929050565b6000806000806000608086880312156109c4576109c361082f565b5b60006109d288828901610882565b95505060206109e388828901610882565b94505060406109f4888289016108b8565b935050606086013567ffffffffffffffff811115610a1557610a14610834565b5b610a2188828901610952565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610a6581610a30565b82525050565b6000602082019050610a806000830184610a5c565b92915050565b600060208284031215610a9c57610a9b61082f565b5b6000610aaa848285016108b8565b91505092915050565b610abc81610859565b82525050565b6000602082019050610ad76000830184610ab3565b92915050565b6000819050919050565b6000610b02610afd610af884610839565b610add565b610839565b9050919050565b6000610b1482610ae7565b9050919050565b6000610b2682610b09565b9050919050565b610b3681610b1b565b82525050565b6000602082019050610b516000830184610b2d565b92915050565b610b6081610897565b82525050565b6000602082019050610b7b6000830184610b57565b92915050565b600080600060608486031215610b9a57610b9961082f565b5b6000610ba886828701610882565b9350506020610bb9868287016108b8565b9250506040610bca868287016108b8565b9150509250925092565b600081519050610be38161086b565b92915050565b600060208284031215610bff57610bfe61082f565b5b6000610c0d84828501610bd4565b91505092915050565b6000606082019050610c2b6000830186610ab3565b610c386020830185610ab3565b610c456040830184610b57565b949350505050565b600082825260208201905092915050565b7f7472616e73666572206f776e6572000000000000000000000000000000000000600082015250565b6000610c94600e83610c4d565b9150610c9f82610c5e565b602082019050919050565b60006020820190508181036000830152610cc381610c87565b9050919050565b600081905092915050565b50565b6000610ce5600083610cca565b9150610cf082610cd5565b600082019050919050565b6000610d0682610cd8565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610d46601483610c4d565b9150610d5182610d10565b602082019050919050565b60006020820190508181036000830152610d7581610d39565b905091905056fea2646970667358221220be7a14ca2176b63204883e7bd502d4c80f2915a3e2660620a67319780a081fd364736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Handle the receipt of a NFT. The ERC721 smart contract calls this function on the recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return of other than the magic value MUST result in the transaction being reverted. Returns `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` unless throwing.",
        "params": {
          "_data": "Additional data with no specified format.",
          "_from": "The address which previously owned the token.",
          "_operator": "The address which called `safeTransferFrom` function.",
          "_tokenId": "The NFT identifier which is being transferred."
        },
        "returns": {
          "_0": "Returns `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "The contract address is always the message sender. A wallet/broker/auction application MUST implement the wallet interface if it will accept safe transfers."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 152,
        "contract": "contracts/loan.sol:loan",
        "label": "nft",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC721)115"
      },
      {
        "astId": 182,
        "contract": "contracts/loan.sol:loan",
        "label": "loanernft",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(loaner)177_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)115": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(loaner)177_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct loan.loaner)",
        "numberOfBytes": "32",
        "value": "t_struct(loaner)177_storage"
      },
      "t_struct(loaner)177_storage": {
        "encoding": "inplace",
        "label": "struct loan.loaner",
        "members": [
          {
            "astId": 172,
            "contract": "contracts/loan.sol:loan",
            "label": "nft",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 174,
            "contract": "contracts/loan.sol:loan",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 176,
            "contract": "contracts/loan.sol:loan",
            "label": "amt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}